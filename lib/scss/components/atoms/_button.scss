@use '../../variables/colors' as *;
@use "../../helpers/const" as enum;
@use "../../mixins/backgounds";

@use '../../placeholders';
@use '../../helpers/themed';
@use '../../helpers' as helper;
@use '../../mixins' as mixin;
@use '../../mixins/misc' as *;

.btn {
  padding-inline: helper.space(24);
  padding-block: helper.rem(12);
  border-radius: helper.rem(4);
  border: none;
  outline: none;
  line-height: helper.em(24, 15);
  min-width: helper.rem(216);
  transition: all .25s;
  white-space: nowrap;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  @include mixin.x(8);
  @extend %body-bold-text;

  > span:not([class^='icon-']) {
    @extend %body-bold-text;
  }

  > [class^='icon-'] {
    display: flex;
    font-size: helper.rem(20);
  }

  &-primary {
    $parent: &;
    background-color: $c-eren;
    color: $c-grayscale--light;
    @include mixin.x(12);

    > span,
    > i {
      color: $c-grayscale--light;
    }

    &#{$parent}-cta {
      > [class^='icon-'] {
        font-size: helper.rem(12);
        line-height: 1;
        display: inline-grid;
        align-items: center;
        justify-content: center;
        background-color: $c-opacity__gray--200;
        transform: translateX(0);
        @include mixin.circle(24);
        @include mixin.fast-transition(transform);
      }
    }

    &:active:not(:disabled),
    &:hover:not(:disabled) {
      background-color: $c-eren__hover;

      &#{$parent}-cta {
        > [class^='icon-'] {
          transform: translateX(helper.rem(4));
        }
      }
    }

    @include backgounds.can-use((mikasa, armin), true);
  }

  &-secondary {
    background-color: $c-mikasa;

    &:focus:not(:disabled),
    &:active:not(:disabled),
    &:hover:not(:disabled) {
      background-color: $c-mikasa__hover;
    }

    @include backgounds.can-use((armin, levi, annie), true);
  }

  &-tertiary {
    @include themed.properties {
      background-color: themed.values($c-grayscale--100, $c-grayscale--1000);
      color: themed.values($c-grayscale--ash, $c-grayscale--light);
    }

    &:active:not(:disabled),
    &:hover:not(:disabled) {
      @include themed.properties {
        background-color: themed.values($c-grayscale--200, $c-grayscale--900);
      }
    }
  }

  &-subtle {
    background-color: transparent;
    @include themed.properties {
      color: themed.values($c-grayscale--ash, $c-grayscale--light);
      @include themed.light {
        @include mixin.border-grey(200);
      }
      @include themed.dark {
        @include mixin.border-grey(500);
      }
    }

    &:hover:not(:disabled) {
      background-color: transparent;
      @include mixin.border-grey(400);
    }
  }

  &-glass {
    background-color: $c-opacity__light--100;
    backdrop-filter: blur(helper.rem(9));
    color: $c-grayscale--light;

    &:hover:not(:disabled) {
      color: $c-grayscale--light;
      background-color: $c-opacity__light--0;
    }

    &:disabled {
      cursor: not-allowed;
      color: $c-opacity__light--200;
    }
  }

  &-narrow {
    padding-block: helper.space(8);
  }

  &-fit {
    min-width: auto;
    width: min-content;
  }

  &-action {
    &-next,
    &-previous {
      span:not([class^='icon-']) {
        @extend %body-regular-text;
        @include themed.properties {
          color: themed.values($c-grayscale--800, $c-grayscale--light);
        }
      }

      [class^='icon-'] {
        @include mixin.slow-transition(transform);
      }
    }

    &-next:hover:not(:disabled) {
      [class^='icon-'] {
        transform: translateX(helper.rem(4));
      }
    }

    &-previous:hover:not(:disabled) {
      [class^='icon-'] {
        transform: translateX(-#{helper.rem(4)});
      }
    }

  }

  &-only-icon {
    min-width: min-content;
    width: 1em;
    height: 1em;
    font-size: helper.rem(22);
    align-items: center;
    justify-content: center;
    outline: none;
    padding: 0;
    border: 0;
    border-radius: 0;
    @include themed.properties {
      color: themed.values($c-grayscale--ash, $c-grayscale--light);
    }

    &:before {
      display: flex;
      margin: auto;
      width: min-content;
      height: min-content;
    }

    &:focus {
      box-shadow: none;
    }
  }

  &:disabled {
    cursor: not-allowed;
    opacity: 1;
    pointer-events: auto;
    @include themed.properties {
      background-color: themed.values($c-grayscale--100, $c-grayscale--1000);
      color: themed.values($c-opacity__gray--400, $c-opacity__light--200);
    }
  }
}
