<%
/**
 * @required {string} label
 */
const props = {
    label: label,
    href: typeof href !== 'undefined' ? href : '#',
    entries: typeof entries !== 'undefined' ? entries : [],
    itemId: typeof id !== 'undefined' ? id : `${label.replace(/\s+/g, '')
            .toLowerCase()}_dropdown_menu`,
    key: typeof key !== 'undefined' ? key : ''
}

const data = {
    hasMenu: 0 < props.entries.length
}

const styles = {
    navLink: {
        isActive: {
            toString: () => ('' !== props.key && activeRoute.includes(props.key))
                            || ('#' !== props.href && activeRoute === props.href) ? 'active' : ''
        }
    }
}

const methods = {

    dropdown: {
        item: {
            isActive: (item) => activeRoute === item.href ? 'active' : ''
        }
    }
}
%>

<li class="nav-item <% if( data.hasMenu ) { %> dropdown <% } %> ">
    <a class="nav-link <%- styles.navLink.isActive -%> <% if ( data.hasMenu) { %> dropdown-toggle <% } %>" href="<%- props.href -%>"
    <% if( data.hasMenu ) { %>
       id="<%- props.itemId -%>" role="button" data-bs-toggle="dropdown" aria-expanded="false"
            <% } %>
    >
        <%- props.label %>
    </a>
    <% if ( data.hasMenu ) { %>
        <ul class="dropdown-menu" aria-labelledby="<%- props.itemId -%>">
            <% props.entries.forEach((entry) => { %>
                <li>
                    <a class="dropdown-item <%- methods.dropdown.item.isActive(entry) -%>" href="<%- entry.href -%>"><%- entry.label %></a>
                </li>
            <% }) %>
        </ul>
    <% } %>
</li>
