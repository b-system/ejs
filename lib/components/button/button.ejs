<%
const props = {
    id: typeof id !== 'undefined' ? id : null,
    label: typeof label !== 'undefined' ? label : null,
    href: typeof href !== 'undefined' ? href : '',
    variant: typeof variant !== 'undefined' ? variant : 'primary',
    isCTA: typeof isCTA !== 'undefined' ? isCTA : false,
    icon: typeof icon !== 'undefined' ? icon : '',
    iconPosition: typeof icon !== 'undefined' && typeof iconPosition !== 'undefined' ? iconPosition : typeof icon !== 'undefined' ? 'after' : null,
    isActionNext: typeof isActionNext !== 'undefined' ? isActionNext : false,
    isActionPrevious: typeof isActionPrevious !== 'undefined' ? isActionPrevious : false,
    isDisabled: typeof isDisabled !== 'undefined' ? isDisabled : false,
    isOnlyIcon: typeof isOnlyIcon !== 'undefined' ? isOnlyIcon : false,
    isNarrow: typeof isNarrow !== 'undefined' ? isNarrow : false,
    isFit: typeof isFit !== 'undefined' ? isFit : false,
}


function validate(props) {
    const buttonVariants = ['primary', 'secondary', 'tertiary', 'subtle', 'glass']
    const buttonIconPositions = ['after', 'before']

    if (!buttonVariants.includes(props.variant)) {
        throw new Error(`The variant ${props.variant} doesn't exists`)
    }

    if (props.iconPosition && !buttonIconPositions.includes(props.iconPosition)) {
        throw new Error(`The icon position ${props.iconPosition} doesn't exists`)
    }
}
validate(props)

const styles = {
    button: {
        variant: {
            toString: () => {
                return [`btn-${props.variant}`,
                    props.isCTA ? 'btn-primary-cta' : '',
                    props.isActionNext ? 'btn-action-next' : props.isActionPrevious ? 'btn-action-previous' : '',
                    props.isNarrow ? 'btn-narrow' : '',
                    props.isFit ? 'btn-fit' : ''
                ].join(' ')
                        .trim()
            }
        }
    }
}
const attr = {
    href: {
        toString: () => {
            return props.href !== '' ? `href='${props.href}'` : ''
        }
    },
    id: {
      toString: () => {
        return props.id ? `id='${props.id}'` : ''
      }
    }
}
%>
<% if (!props.isOnlyIcon) { %>
    <button type="button" <%- attr.href -%>  <%- attr.id -%>
            class="btn <%- styles.button.variant -%>"
            <%- `${props.isDisabled ? 'disabled' : ''}` -%>
    >

        <% if( (props.icon && props.iconPosition === 'before') || props.isActionPrevious ) { %>
            <% if (props.isActionPrevious) { %>
                <%- include(`${component}/icons/icon`, {icon: 'back'}) %>
            <% } else { %>
                <%- include(`${component}/icons/icon`, {icon: props.icon}) %>
            <% } %>
        <% } %>

        <% if( props.icon !== '' || props.isActionNext || props.isActionPrevious) { %>
            <span><%= props.label %></span>
        <% } else { %>
            <%= props.label %>
        <% } %>

        <% if( (props.icon && props.iconPosition === 'after') || props.isActionNext ) { %>
            <% if (props.isActionNext) { %>
                <%- include(`${component}/icons/icon`, {icon: 'next'}) %>
            <% } else { %>
                <%- include(`${component}/icons/icon`, {icon: props.icon}) %>
            <% } %>
        <% } %>

    </button>
<% } else if(props.isOnlyIcon) { %>
    <button type="button" <%- attr.href -%> <%- attr.id -%> class="btn btn-only-icon">
        <%- include(`${component}/icons/icon`, {icon: props.icon}) %>
    </button>
<% } %>
