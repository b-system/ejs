<%
const props = {
    label: typeof label !== 'undefined' ? label : null,
    href: typeof href !== 'undefined' ? href : '#',
    variant: typeof variant !== 'undefined' ? variant : 'primary',
    isCTA: typeof isCTA !== 'undefined' ? isCTA : false,
    icon: typeof icon !== 'undefined' ? icon : '',
    iconPosition: typeof icon !== 'undefined' && typeof iconPosition !== 'undefined' ? iconPosition : typeof icon !== 'undefined' ? 'after' : null,
    isActionNext: typeof isActionNext !== 'undefined' ? isActionNext : false,
    isActionPrevious: typeof isActionPrevious !== 'undefined' ? isActionPrevious : false,
    isDisabled: typeof isDisabled !== 'undefined' ? isDisabled : false,
    isTransparent: typeof isTransparent !== 'undefined' ? isTransparent : false,
    isOnlyIcon: typeof isOnlyIcon !== 'undefined' ? isOnlyIcon : false,
    isNarrow: typeof isNarrow !== 'undefined' ? isNarrow : false

}


function validate(props) {
    const buttonVariants = ['primary', 'secondary', 'tertiary', 'subtle']
    const buttonIconPositions = ['after', 'before']

    if (!buttonVariants.includes(props.variant)) {
        throw new Error(`The variant ${props.variant} doesn't exists`)
    }

    if (props.iconPosition && !buttonIconPositions.includes(props.iconPosition)) {
        throw new Error(`The icon position ${props.iconPosition} doesn't exists`)
    }

    if (props.isTransparent && buttonVariants[2] !== props.variant) {
        throw new Error('Only the tertiary variant can be transparent')
    }
}
validate(props)

const styles = {
  button: {
    variant: {
      toString:()=> {
        return [`btn-${props.variant}`,
            props.isCTA ? 'btn-primary-cta' : '',
            props.isActionNext ? 'btn-action-next' : props.isActionPrevious ? 'btn-action-previous' : '',
            props.isNarrow ? 'btn-narrow' : '',
            props.isTransparent ? 'transparent' : ''
        ].join(' ')
      }
    }
  }
}

%>
<% if (!props.isOnlyIcon) { %>
<button href="<%- props.href -%>"
        class="btn <%- styles.button.variant -%>"
        <%- `${props.isDisabled ? 'disabled' : ''}` -%>
>

    <% if( (props.icon && props.iconPosition === 'before') || props.isActionPrevious ) { %>
        <% if (props.isActionPrevious) { %>
            <span class="icon-back"></span>
        <% } else { %>
            <span class="<%= `icon-${props.icon}` %>"></span>
        <% } %>
    <% } %>

    <% if( props.icon !== '' || props.isActionNext || props.isActionPrevious) { %>
        <span><%= props.label %></span>
    <% } else { %>
        <%= props.label %>
    <% } %>

    <% if( (props.icon && props.iconPosition === 'after') || props.isActionNext ) { %>
        <% if (props.isActionNext) { %>
            <span class="icon-next"></span>
        <% } else { %>
            <span class="<%= `icon-${props.icon}` %>"></span>
        <% } %>
    <% } %>

</button>
<% } else if(props.isOnlyIcon) { %>
    <button href="<%= props.href %>" class="btn btn-only-icon">
        <span class="<%= `icon-${props.icon}` %>"></span>
    </button>
<% } %>
